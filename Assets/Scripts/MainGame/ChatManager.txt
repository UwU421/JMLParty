using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using Photon.Pun;

public class ChatManager : MonoBehaviour
{
    
    public GameObject plMove;
    public PhotonView photonView;
    public GameObject SpeechBubbleObj;
    public Text UpdatedText;

    private InputField ChatInputField;
    private bool DisableSend;

    private void Awake() 
    {
            ChatInputField = GameObject.Find("ChatInputField").GetComponent<InputField>();      
    }

    private void Update() 
    {
        if (photonView.IsMine)
        {
            if (!DisableSend && ChatInputField.isFocused)
            {
                if (ChatInputField.text != "" && ChatInputField.text.Length > 0 && Input.GetKeyDown(KeyCode.Slash))
                {
                    photonView.RPC("SendMessage", PhotonTargets.AllBuffered, ChatInputField.text);
                    SpeechBubbleObj.SetActive(true);

                    ChatInputField.text = "";
                    DisableSend = true;
                }
            }
        }
    }



    [PunRPC]
    private void SendMessage(string message) 
        { 
            UpdatedText.text = message;

            StartCoroutine("Remove");
        }

    IEnumerator Remove()
    {
        yield return new WaitForSeconds(4f);
        SpeechBubbleObj.SetActive(false);
        DisableSend = false;
    }

    private void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info) 
    {
        if (stream.isWriting)
        {
            stream.SendNext(SpeechBubbleObj.active);
        }
        else if (stream.isReading)
        {
            SpeechBubbleObj.SetActive((bool)stream.RecieveNext());
        }
    }
}
